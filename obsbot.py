#!/usr/bin/env python3
# Generated by usbrply
import usb1
import argparse
import time

# Generated by usbrply
# Source: Windows pcap (USBPcap)
ai_modes = {
    "stop": 
        b"\x16\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "normal": 
        b"\x16\x02\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "upperbody": 
        b"\x16\x02\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "closeup": 
        b"\x16\x02\x02\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "headless":
        b"\x16\x02\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "lowerbody": 
        b"\x16\x02\x02\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "desk": #broken
        b"\x16\x02\x05\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "whiteboard":
        b"\x16\x02\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "hand":
        b"\x16\x02\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00",
    "group":
        b"\x16\x02\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
}

# dev_set = {
#     "sleep":
#         b"\xAA\x25\xAB\x00\x0C\x00\x3E\x1A\x0A\x02\xC2\xA0\x04\x00\xBF\xFB"
#         b"\x01\x00\x00\x00\xBB\x02\x00\x00\x38\x2E\x22\x25\xBB\x02\x00\x00"
#         b"\x00\x00\x00\x00\x00\x00\x00\x00\x80\xD2\x31\x25\xBB\x02\x00\x00"
#         b"\x10\x7F\xB6\x2A\xBB\x02\x00\x00\x00\x00\x00\x00",
#     "wake":
#         b"\xAA\x25\xAC\x00\x0C\x00\x8F\xC0\x0A\x02\xC2\xA0\x04\x00\xBE\x07"
#         b"\x00\x00\x00\x00\xBB\x02\x00\x00\x38\x2E\x22\x25\xBB\x02\x00\x00"
#         b"\x00\x00\x00\x00\x00\x00\x00\x00\x80\xD2\x31\x25\xBB\x02\x00\x00"
#         b"\xD0\x71\x36\x36\xBB\x02\x00\x00\x00\x00\x00\x00"
# }

#gimbal = {
    #"up":,
    #"down":,
    #"left":,
    #"right":
#}

def write_ai_mode(dev, mode):
    def control_read(bRequestType, bRequest, wValue, wIndex, wLength, timeout=None):
      return dev.controlRead(bRequestType, bRequest, wValue, wIndex, wLength,
                            timeout=(1000 if timeout is None else timeout))

    def control_write(bRequestType, bRequest, wValue, wIndex, data, timeout=None):
        dev.controlWrite(bRequestType, bRequest, wValue, wIndex, data, 
                        timeout=(1000 if timeout is None else timeout))
    
    control_write(0x21, 0x01, 0x0600, 0x0200, ai_modes[mode])
        
def write_sleep_mode(dev, sleep):
    def control_write(bRequestType, bRequest, wValue, wIndex, data, timeout=None):
        dev.controlWrite(bRequestType, bRequest, wValue, wIndex, data,
                         timeout=(1000 if timeout is None else timeout))
                         
    control_write(0x21, 0x01, 0x0200, 0x0200, dev_set['sleep' if sleep else 'wake'])
    

def open_dev(vid_want, pid_want, usbcontext=None):
    if usbcontext is None:
        usbcontext = usb1.USBContext()
    
    print("Scanning for devices...")
    for udev in usbcontext.getDeviceList(skip_on_error=True):
        vid = udev.getVendorID()
        pid = udev.getProductID()
        if (vid, pid) == (vid_want, pid_want):
            print("Found device")
            print("Bus %03i Device %03i: ID %04x:%04x" % (
                udev.getBusNumber(),
                udev.getDeviceAddress(),
                vid,
                pid))
            return udev.open()
    raise Exception("Failed to find a device")

def main():
    # Parse args
    parser = argparse.ArgumentParser(prog="OBSBOT Control", description="Control OBSBOT Tiny 2")
    parser.add_argument('-ai', action='append', choices = ['stop', 'normal', 'upperbody', 'closeup', 'headless', 'lowerbody', 'desk', 'whiteboard', 'hand', 'group'])
    # parser.add_argument('--wake', action='store_true')
    # parser.add_argument('--sleep', action='store_true')
    parser.add_argument('--version', action='version', version='%(prog)s 0.1.0')
    args = parser.parse_args()
    
    # Vendor and product ID for OBSBOT Tiny 2
    vid_want = 0x3564
    pid_want = 0xFEF8

    usbcontext = usb1.USBContext()
    dev = open_dev(vid_want, pid_want, usbcontext)
    
    dev.setAutoDetachKernelDriver(True)
    dev.claimInterface(0)
    dev.resetDevice()
    for mode in args.ai or []:
        write_ai_mode(dev, mode)
    # if (args.sleep):
    #     write_sleep_mode(dev, True)
    # if (args.wake):
    #     write_sleep_mode(dev, False)
      
    # Small delay for stability
    time.sleep(0.1)
    dev.releaseInterface(0)

if __name__ == "__main__":
    main()

